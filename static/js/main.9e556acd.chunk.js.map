{"version":3,"sources":["const/alexa.js","const/google.js","components/header.js","components/speaker_button.js","components/main.js","App.js","registerServiceWorker.js","index.js"],"names":["Alexa","pre_commands","commands","title","pronunciation","description","Google","Header","props","state","text_value","speaker_type","_changeText","bind","_toggleButton","ssu","SpeechSynthesisUtterance","this","text","lang","speechSynthesis","speak","e","setState","target","value","className","href","rel","type","name","id","checked","onChange","htmlFor","defaultValue","placeholder","onClick","_onClick","Component","SpeakerButton","map","command","i","key","Main","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"sSAAaA,EAAQ,CACnBC,aAAc,iCACdC,SAAU,CACR,CACEC,MAAO,iCACPC,cAAe,6CACfC,YAAa,kIAEf,CACEF,MAAO,iCACPC,cAAe,6CACfC,YAAa,gHAEf,CACEF,MAAO,iCACPC,cAAe,mDACfC,YAAa,oGAEf,CACEF,MAAO,iCACPC,cAAe,mDACfC,YAAa,oGAEf,CACEF,MAAO,iCACPC,cAAe,uCACfC,YAAa,oGAEf,CACEF,MAAO,uCACPC,cAAe,6CACfC,YAAa,sHAEf,CACEF,MAAO,mDACPC,cAAe,mDACfC,YAAa,8IAEf,CACEF,MAAO,+DACPC,cAAe,+DACfC,YAAa,wKCzCNC,EAAS,CACpBL,aAAc,kBACdC,SAAU,CACR,CACEC,MAAO,8BACPC,cAAe,iGACfC,YAAa,iIAEf,CACEF,MAAO,iCACPC,cAAe,6CACfC,YAAa,kIAEf,CACEF,MAAO,iCACPC,cAAe,6CACfC,YAAa,gHAEf,CACEF,MAAO,iCACPC,cAAe,mDACfC,YAAa,oGAEf,CACEF,MAAO,iCACPC,cAAe,mDACfC,YAAa,oGAEf,CACEF,MAAO,iCACPC,cAAe,uCACfC,YAAa,oGAEf,CACEF,MAAO,uCACPC,cAAe,6CACfC,YAAa,sHAEf,CACEF,MAAO,+DACPC,cAAe,+DACfC,YAAa,wKCrCEE,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,WAAY,GACZC,aAAc,SAEhB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBAPJ,E,wEAWjB,IAAIE,EAAM,IAAIC,yBACVf,EAAe,GACnB,OAAQgB,KAAKR,MAAME,cACjB,IAAK,QACHV,EAAeD,EAAMC,aACrB,MAEF,IAAK,SACHA,EAAeK,EAAOL,aAM1Bc,EAAIG,KAAOjB,EAAegB,KAAKR,MAAMC,WACrCK,EAAII,KAAO,QACXC,gBAAgBC,MAAMN,K,kCAGZO,GACVL,KAAKM,SAAS,CAACb,WAAYY,EAAEE,OAAOC,U,oCAGxBH,GACZL,KAAKM,SAAS,CAACZ,aAAcW,EAAEE,OAAOC,U,+BAG9B,IAAD,OACP,OACE,yBAAKC,UAAU,gBACb,4BAAQA,UAAU,UAChB,iFACA,wWAA0D,6BAA1D,mDACU,uBAAGC,KAAK,4DAA4DH,OAAO,SAASI,IAAI,uBAAxF,kCADV,8CAGA,6BACE,yBAAKF,UAAU,gBACb,2BACEG,KAAK,QACLJ,MAAM,QACNK,KAAK,KACLC,GAAG,QACHC,QAAqC,UAA5Bf,KAAKR,MAAME,aACpBsB,SAAUhB,KAAKH,gBAEjB,2BAAOoB,QAAQ,QAAQR,UAAU,gBAAjC,SACA,2BACEG,KAAK,QACLJ,MAAM,SACNK,KAAK,KACLC,GAAG,SACHC,QAAqC,WAA5Bf,KAAKR,MAAME,aACpBsB,SAAUhB,KAAKH,gBAEjB,2BAAOoB,QAAQ,SAASR,UAAU,iBAAlC,gBAEF,yBAAKK,GAAG,SACN,2BACEF,KAAK,OACLE,GAAG,OACHI,aAAclB,KAAKR,MAAMC,WACzBuB,SAAUhB,KAAKL,YACfwB,YAAY,qDAEd,4BAAQL,GAAG,OAAON,MAAM,GAAGY,QAAS,kBAAM,EAAKC,aAC7C,uBAAGZ,UAAU,qC,GA7EOa,aCAfC,E,YACnB,WAAYhC,GAAQ,IAAD,EAEjB,OAFiB,qBACjB,4CAAMA,KACOA,MAAMG,cACjB,IAAK,QACH,EAAKA,aAAeX,EACpB,MAEF,IAAK,SACH,EAAKW,aAAeL,EARP,S,sEAgBVF,GACP,IAAIW,EAAM,IAAIC,yBACdD,EAAIG,KAAOD,KAAKN,aAAaV,aAAeG,EAC5CW,EAAII,KAAO,QACXC,gBAAgBC,MAAMN,K,+BAGd,IAAD,OACP,OACEE,KAAKN,aAAaT,SAASuC,KAAI,SAACC,EAASC,GACvC,OACE,yBAAKC,IAAKD,EAAGjB,UAAU,sBACrB,4BAAQA,UAAU,OAAOW,QAAS,kBAAM,EAAKC,SAASI,EAAQtC,iBAC5D,yBAAKsB,UAAU,aACb,wBAAIA,UAAU,wBACZ,uBAAGA,UAAU,gBADf,SAEGgB,EAAQvC,OAEX,uBAAGuB,UAAU,uBACVgB,EAAQrC,uB,GApCgBkC,aCDtBM,E,YACnB,WAAYrC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXE,aAAc,UAEhB,EAAKG,cAAgB,EAAKA,cAAcD,KAAnB,gBALJ,E,2EAQLS,GACZL,KAAKM,SAAS,CAACZ,aAAcW,EAAEE,OAAOC,U,+BAItC,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,QACb,2BACEG,KAAK,QACLJ,MAAM,QACNK,KAAK,WACLC,GAAG,aACHC,QAAqC,UAA5Bf,KAAKR,MAAME,aACpBsB,SAAUhB,KAAKH,gBAEjB,2BAAOY,UAAU,WAAWQ,QAAQ,cAClC,uBAAGR,UAAU,kBADf,UAGA,2BACEG,KAAK,QACLJ,MAAM,SACNK,KAAK,WACLC,GAAG,cACHC,QAAqC,WAA5Bf,KAAKR,MAAME,aACpBsB,SAAUhB,KAAKH,gBAEjB,2BAAOY,UAAU,WAAWQ,QAAQ,eAClC,uBAAGR,UAAU,kBADf,gBAGA,yBAAKA,UAAU,cAAcK,GAAG,iBAC9B,yBAAKL,UAAU,OACb,kBAAC,EAAD,CAAef,aAAa,YAGhC,yBAAKe,UAAU,cAAcK,GAAG,kBAC9B,yBAAKL,UAAU,OACb,kBAAC,EAAD,CAAef,aAAa,oB,GA/CV4B,aCwBnBO,E,iLApBX,OACE,6BACE,yBAAKpB,UAAU,kBACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,QACb,wBAAIA,UAAU,cACd,uBAAGA,UAAU,sBADb,SAKF,uBAAGA,UAAU,cAAb,0IAGJ,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAhBUa,aCKZQ,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBpD,QACf8C,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MCzEjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBjB,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,mCAAwBzB,OAAOC,UAC3CyB,SAAW1B,OAAOC,SAASyB,OAIvC,OAGF1B,OAAO2B,iBAAiB,QAAQ,WAC9B,IAAMtB,EAAK,UAAMoB,mCAAN,sBAEP3B,IAiDV,SAAiCO,GAE/BuB,MAAMvB,GACHI,MAAK,SAAAoB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C3B,UAAUC,cAAc2B,MAAMzB,MAAK,SAAAC,GACjCA,EAAayB,aAAa1B,MAAK,WAC7BT,OAAOC,SAASmC,eAKpBhC,EAAgBC,MAGnBa,OAAM,WACLF,QAAQC,IACN,oEArEAoB,CAAwBhC,GAIxBC,UAAUC,cAAc2B,MAAMzB,MAAK,WACjCO,QAAQC,IACN,gHAMJb,EAAgBC,OCzCxBiC,I","file":"static/js/main.9e556acd.chunk.js","sourcesContent":["export const Alexa = {\n  pre_commands: 'アレクサ、',\n  commands: [\n    {\n      title: '音楽かけて',\n      pronunciation: 'おんがくかけて',\n      description: 'ランダムで音楽をかけてくれるコマンドです。',\n    },\n    {\n      title: '音楽とめて',\n      pronunciation: 'おんがくとめて',\n      description: '再生中の音楽を停止するコマンドです。',\n    },\n    {\n      title: '音量上げて',\n      pronunciation: 'おんりょうあげて',\n      description: '音量を上げてくれるコマンドです。',\n    },\n    {\n      title: '音量下げて',\n      pronunciation: 'おんりょうさげて',\n      description: '音量を下げてくれるコマンドです。',\n    },\n    {\n      title: '洋楽流して',\n      pronunciation: '洋楽ながして',\n      description: '洋楽をかけてくれるコマンドです。',\n    },\n    {\n      title: 'ジャズ流して',\n      pronunciation: 'ジャズながして',\n      description: 'ジャズ音楽をかけてくれるコマンドです。',\n    },\n    {\n      title: 'この曲名を教えて',\n      pronunciation: 'この曲名を教えて',\n      description: '現在流れている曲名を教えてくれるコマンドです。',\n    },\n    {\n      title: 'この曲をリピートして',\n      pronunciation: 'この曲をリピートして',\n      description: '現在流れている曲をリピート再生してくれるコマンドです。',\n    },\n  ]\n}","export const Google = {\n  pre_commands: 'OK Google、',\n  commands: [\n    {\n      title: 'オフィスBGM',\n      pronunciation: 'オフィスBGMで　spotify　で音楽を流して',\n      description: 'palanのオフィスで音楽をかける為のコマンドです',\n    },\n    {\n      title: '音楽かけて',\n      pronunciation: 'おんがくかけて',\n      description: 'ランダムで音楽をかけてくれるコマンドです。',\n    },\n    {\n      title: '音楽とめて',\n      pronunciation: 'おんがくとめて',\n      description: '再生中の音楽を停止するコマンドです。',\n    },\n    {\n      title: '音量上げて',\n      pronunciation: 'おんりょうあげて',\n      description: '音量を上げてくれるコマンドです。',\n    },\n    {\n      title: '音量下げて',\n      pronunciation: 'おんりょうさげて',\n      description: '音量を下げてくれるコマンドです。',\n    },\n    {\n      title: '洋楽流して',\n      pronunciation: '洋楽ながして',\n      description: '洋楽をかけてくれるコマンドです。',\n    },\n    {\n      title: 'ジャズ流して',\n      pronunciation: 'ジャズながして',\n      description: 'ジャズ音楽をかけてくれるコマンドです。',\n    },\n    {\n      title: 'この曲をリピートして',\n      pronunciation: 'この曲をリピートして',\n      description: '現在流れている曲をリピート再生してくれるコマンドです。',\n    },\n  ]\n}","import React, { Component } from 'react';\nimport {Alexa} from '../const/alexa';\nimport {Google} from '../const/google';\n\nexport default class Header extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text_value: \"\",\n      speaker_type: \"alexa\",\n    };\n    this._changeText = this._changeText.bind(this);\n    this._toggleButton = this._toggleButton.bind(this);\n  }\n\n  _onClick() {\n    let ssu = new SpeechSynthesisUtterance();\n    let pre_commands = '';\n    switch (this.state.speaker_type) {\n      case 'alexa': {\n        pre_commands = Alexa.pre_commands;\n        break;\n      }\n      case 'google': {\n        pre_commands = Google.pre_commands;\n        break;\n      }\n      default:\n      break;\n    }\n    ssu.text = pre_commands + this.state.text_value;\n    ssu.lang = 'ja-JP';\n    speechSynthesis.speak(ssu);\n  }\n\n  _changeText(e) {\n    this.setState({text_value: e.target.value});\n  }\n\n  _toggleButton(e) {\n    this.setState({speaker_type: e.target.value});\n  }\n\n  render() {\n    return (\n      <div className=\"jumbotron mv\">\n        <header className=\"mv_ttl\">\n          <h2>Smart Speaker's Commands Speaker （SSCS）</h2>\n          <p>スマートスピーカーのコマンドを日本語で発音して代行してくれるサイトです。コマンドをクリックすると発音されます。<br/>\n            コマンドの追加は<a href=\"https://github.com/eishis/smart-speakers-commands-speaker\" target=\"_blank\" rel=\"noopener noreferrer\">こちらから</a>お願いします。\n          </p>\n          <div>\n            <div className=\"radio_button\">\n              <input\n                type=\"radio\"\n                value=\"alexa\"\n                name=\"s2\"\n                id=\"alexa\"\n                checked={this.state.speaker_type === \"alexa\"}\n                onChange={this._toggleButton}\n              />\n              <label htmlFor=\"alexa\" className=\"switch-alexa\">Alexa</label>\n              <input\n                type=\"radio\"\n                value=\"google\"\n                name=\"s2\"\n                id=\"google\"\n                checked={this.state.speaker_type === \"google\"}\n                onChange={this._toggleButton}\n              />\n              <label htmlFor=\"google\" className=\"switch-google\">Google Home</label>\n            </div>\n            <div id=\"form1\">\n              <input\n                type=\"text\"\n                id=\"sbox\"\n                defaultValue={this.state.text_value}\n                onChange={this._changeText}\n                placeholder=\"キーワードを入力\"\n              />\n              <button id=\"sbtn\" value=\"\" onClick={() => this._onClick()}>\n                <i className=\"fas fa-microphone fa-2x\"></i>\n              </button>\n            </div>\n          </div>\n        </header>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport {Alexa} from '../const/alexa';\nimport {Google} from '../const/google';\n\nexport default class SpeakerButton extends Component {\n  constructor(props) {\n    super(props);\n    switch (this.props.speaker_type) {\n      case 'alexa': {\n        this.speaker_type = Alexa;\n        break;\n      }\n      case 'google': {\n        this.speaker_type = Google;\n        break;\n      }\n      default:\n      break;\n    }\n  }\n\n  _onClick(pronunciation) {\n    let ssu = new SpeechSynthesisUtterance();\n    ssu.text = this.speaker_type.pre_commands + pronunciation;\n    ssu.lang = 'ja-JP';\n    speechSynthesis.speak(ssu);\n  }\n\n  render() {\n    return (\n      this.speaker_type.commands.map((command, i) => {\n        return (\n          <div key={i} className=\"col-sm-6 mb-2 mt-2\">\n            <button className=\"card\" onClick={() => this._onClick(command.pronunciation)}>\n              <div className=\"card-body\">\n                <h4 className=\"card-title text-left\">\n                  <i className=\"fas fa-play\"></i>　\n                  {command.title}\n                </h4>\n                <p className=\"card-text text-left\">\n                  {command.description}\n                </p>\n              </div>\n            </button>\n          </div>\n        );\n      })\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport SpeakerButton from './speaker_button';\n\nexport default class Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      speaker_type: \"google\",\n    };\n    this._toggleButton = this._toggleButton.bind(this);\n  }\n\n  _toggleButton(e) {\n    this.setState({speaker_type: e.target.value});\n  }\n\n  render() {\n    return (\n      <div className=\"main\">\n        <div className=\"container\">\n          <div className=\"tabs\">\n            <input\n              type=\"radio\"\n              value=\"alexa\"\n              name=\"tab_item\"\n              id=\"main_alexa\"\n              checked={this.state.speaker_type === \"alexa\"}\n              onChange={this._toggleButton}\n            />\n            <label className=\"tab_item\" htmlFor=\"main_alexa\">\n              <i className=\"fab fa-amazon\"></i> Alexa\n            </label>\n            <input\n              type=\"radio\"\n              value=\"google\"\n              name=\"tab_item\"\n              id=\"main_google\"\n              checked={this.state.speaker_type === \"google\"}\n              onChange={this._toggleButton}\n            />\n            <label className=\"tab_item\" htmlFor=\"main_google\">\n              <i className=\"fab fa-google\"></i> Google Home\n            </label>\n            <div className=\"tab_content\" id=\"alexa_content\">\n              <div className=\"row\">\n                <SpeakerButton speaker_type=\"alexa\"/>\n              </div>\n            </div>\n            <div className=\"tab_content\" id=\"google_content\">\n              <div className=\"row\">\n                <SpeakerButton speaker_type=\"google\"/>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/header';\nimport Main from './components/main';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <div className=\"bg-dark header\">\n          <div className=\"container py-3\">\n            <div className=\"logo\">\n              <h1 className=\"text-white\">\n              <i className=\"fas fa-microphone\"></i>\n                SSCS\n              </h1>\n            </div>\n            <p className=\"text-white\">スマートスピーカーのコマンド発音代行サービス</p>\n          </div>\n        </div>\n        <Header/>\n        <Main/>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}